Table 1 Query:
Create Table EmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Table 2 Query:
Create Table EmployeeSalary 
(EmployeeID int, 
JobTitle varchar(50), 
Salary int
)



Table 1 Insert:
Insert into EmployeeDemographics VALUES
(1001, 'Jim', 'Halpert', 30, 'Male'),
(1002, 'Pam', 'Beasley', 30, 'Female'),
(1003, 'Dwight', 'Schrute', 29, 'Male'),
(1004, 'Angela', 'Martin', 31, 'Female'),
(1005, 'Toby', 'Flenderson', 32, 'Male'),
(1006, 'Michael', 'Scott', 35, 'Male'),
(1007, 'Meredith', 'Palmer', 32, 'Female'),
(1008, 'Stanley', 'Hudson', 38, 'Male'),
(1009, 'Kevin', 'Malone', 31, 'Male')

Table 2 Insert:
Insert Into EmployeeSalary VALUES
(1001, 'Salesman', 45000),
(1002, 'Receptionist', 36000),
(1003, 'Salesman', 63000),
(1004, 'Accountant', 47000),
(1005, 'HR', 50000),
(1006, 'Regional Manager', 65000),
(1007, 'Supplier Relations', 41000),
(1008, 'Salesman', 48000),
(1009, 'Accountant', 42000)

SELECT STATEMENT---
Top, Distinct , Count , Min , Max, Avg, As 

Where statement 
= , <> , < , > , And , Or , Like , Null , NotNull , In

Group by, Order by
Code--
SELECT Gender, COUNT(Gender) AS CountGender
FROM EmployeeDemographics 
GROUP BY Gender

SELECT Gender,Age,COUNT (Gender) AS CountGender
FROM EmployeeDemographics
GROUP BY Gender, Age
-- In this age and gender are the real columns and the count is like
the derived one so no need to write it in the group by section

SELECT Gender,COUNT (Gender) AS CountGender
FROM EmployeeDemographics
WHERE Age>=30
GROUP BY Gender
ORDER BY CountGender DESC
ASC is the default 

Day 2---
Joint functions
Inner Join -- only common part
left OUTER Join first and the common
Right OUTER Join second and the common
FULL Outer Join Both

SELECT *
FROM SQL.dbo.EmployeeDemographics
Inner join SQL.dbo.EmployeeSalary
    ON EmployeeDemographic.EmployeeId = EmployeeSalary.EmployeeId

if we have select only few columns then eveything is normal except the employee id we 
have to specify which employeeId by EmployeeDemographocs.EmployeeID ya other

Day 3----

Firstly we will update the values of the table 1 and 
add a new table in the sql 

Table 1 Insert:
Insert into EmployeeDemographics VALUES
(1011, 'Ryan', 'Howard', 26, 'Male'),
(NULL, 'Holly', 'Flax', NULL, NULL),
(1013, 'Darryl', 'Philbin', NULL, 'Male')

Table 3 Query:
Create Table WareHouseEmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Table 3 Insert:
Insert into WareHouseEmployeeDemographics VALUES
(1013, 'Darryl', 'Philbin', NULL, 'Male'),
(1050, 'Roy', 'Anderson', 31, 'Male'),
(1051, 'Hidetoshi', 'Hasagawa', 40, 'Male'),
(1052, 'Val', 'Johnson', 31, 'Female)

Union and AllUnion Function--
SELECT *
FROM EmployeeDemographics
UNION 
SELECT *
FROM WareHouseEmployeeDemographics

In inner join type function we always have to specific to join the functions by common point
where as in the union function it just join the tables without the common point

Case statement--

Select FirstName,LastName,Age,
CASE 
    WHEN Age>30 THEN 'OLD'
	ELSE 'YOUNG'
END
FROM EmployeeDemographics
WHERE Age is NOT NULL
ORDER BY Age

CASE statement is in order of the proirity in which they are written

SELECT FirstName,LastName,JobTitle,Salary,
CASE
    WHEN JobTitle ='Salesman' THEN Salary + (Salary*0.05)
	WHEN JobTitle =' HR' THEN Salary +(Salary*10)
	Else Salary +(Salary*2)
END
FROM EmployeeDemographics
INNER JOIN EmployeeSalary
   ON
      EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID

HAVE Statement---
It is similar to the where statement and is used for the fucntion like count avg 
that are not givem in the table but are calculated in the table
it is to be used after the order (mostly) afte rit have been calculated


SELECT JobTitle,AVG(Salary)
FROM EmployeeDemographics
JOIN EmployeeSalary
ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID
GROUP BY JobTitle
HAVING AVG(Salary)>45000
ORDER BY AVG(Salary)

Update statement--

SELECT *
FROM EmployeeDemographics

UPDATE EmployeeDemographics
SET EmployeeID=1012
WHERE FirstName='Holly'

DELETE Statement -- 
be careful once data deleted can't be retrieved 
SELECT *
FROM EmployeeDemographics

DELETE EmployeeDemographics
WHERE EmployeeID=1007


ALIASING-- 
Different names given to the tables and the columns so that it it easy to access them and call them 
especially when the data is more

SELECT Demo.EmployeeID,Demo.FirstName,Demo.LastName,Sal.JobTitle,Ware.Age
FROM EmployeeDemographics AS Demo
LEFT JOIN EmployeeSalary AS Sal
ON Demo.EmployeeID=Sal.EmployeeID
LEFT JOIN WareHouseEmployeeDemographics AS Ware
ON Demo.EmployeeID=Ware.EmployeeID

PARTITION BY ---
help to get the count wile maintaing the other columns in the tables whereas the griup by no let the count 
or we have to get rid of the other columns

SELECT FirstName,LastName,Gender,Salary
,COUNT(Gender) OVER (PARTITION BY Gender) AS TotalGender
FROM EmployeeDemographics dem
JOIN EmployeeSalary sal
    ON dem.EmployeeID=sal.EmployeeID

CTE statement---

 WITH CTE_Employee as
 (SELECT FirstName , LastName ,gender ,Salary,
 COUNT(gender) OVER (PARTITION by Gender) AS TotalGender
 ,AVG(Salary) OVER (PARTITION BY Gender) AS AvgSalary
 FROM EmployeeDemographics as emp
 join EmployeeSalary as sal
     on emp.EmployeeID=sal.EmployeeID
WHERE Salary>'45000'
)
SELECT*
FROM CTE_Employee

It is a subquery and as it is created everytime and is not stored anywhere so we have to write it everytime
also the selct statemkent have to be written everytime next to the CTE otherwise it will not work

TEMP TABLES---
CREATE TABLE #temp_Employee
(EmployeeID int,
EmployeeName varchar(100),
Salary int)

INSERT into #temp_Employee VALAUES (
'1001', 'HR','10000')

INSERT INTO #temp_Employee
SELECT*
FROM EmployeeSalary

creating a new tmp table
CREATE TABLE #Temp_Employee2(
JobTitle varchar(50),
EmployeesPerJob int,
AvgAge int,
AvgSalary int)








